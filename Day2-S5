import java.util.Arrays;
abstract class AbstractMath {
    abstract int total(int[] numbers);
    abstract double average(int[] numbers);
    double mean(int[] numbers) {
        return total(numbers) / (double) numbers.length;
    }
    int mode(int[] numbers) {
        Arrays.sort(numbers);
        int maxCount = 0;
        int mode = numbers[0];
        int currentCount = 1;
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] == numbers[i - 1]) {
                currentCount++;
            } else {
                if (currentCount > maxCount) {
                    maxCount = currentCount;
                    mode = numbers[i - 1];
                }
                currentCount = 1;
            }
        }
        if (currentCount > maxCount) {
            mode = numbers[numbers.length - 1];
        }

        return mode;
    }
    double median(int[] numbers) {
        Arrays.sort(numbers);
        int middle = numbers.length / 2;
        if (numbers.length % 2 == 0) {
            return (numbers[middle - 1] + numbers[middle]) / 2.0;
        } else {
            return numbers[middle];
        }
    }
}
class MathOperations extends AbstractMath {
    @Override
    int total(int[] numbers) {
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        return sum;
    }
    @Override
    double average(int[] numbers) {
        return total(numbers) / (double) numbers.length;
    }
}
public class Main {
    public static void main(String[] args) {
        MathOperations math = new MathOperations();
        int[] numbers = {3, 5, 1, 2, 5, 3, 2};

        System.out.println("Total: " + math.total(numbers));
        System.out.println("Average: " + math.average(numbers));
        System.out.println("Mean: " + math.mean(numbers));
        System.out.println("Mode: " + math.mode(numbers));
        System.out.println("Median: " + math.median(numbers));
    }
}
